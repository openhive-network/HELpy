stages:
  - static_code_analysis
  - tests

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  PACKAGES_TO_CHECK: "helpy/ tests/"
  # colors:
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"

  # uses registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-5
  TEST_IMAGE_TAG: "@sha256:eaa6f32730f0f4c45a95a65b6d790bea2b71a59276eb28795c04be7703f003e6"
  CI_BASE_IMAGE: "registry.gitlab.syncad.com/hive/hive/ci-base-image${TEST_IMAGE_TAG}"

image: ${CI_BASE_IMAGE}

.shared_tags: &shared_tags
  - public-runner-docker

.configuration:
  interruptible: true
  before_script:
    - python3 -V
    - poetry self update
    - python3 -m venv venv/
    - source venv/bin/activate
    - poetry install
    - pip list
  tags: *shared_tags

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| STATIC CODE ANALYSIS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

pre_commit_checks:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking all files with pre-commit hooks...${TXT_CLEAR}" &&
      pre-commit run --all-files
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - poetry.lock


lint_code_with_ruff:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (check)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK}
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (diff)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK} --diff

formatting_with_black_check:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking code formatting with Black...${TXT_CLEAR}" &&
      black ${PACKAGES_TO_CHECK} --check --diff --color

type_check_with_mypy:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking types with mypy...${TXT_CLEAR}" &&
      mypy ${PACKAGES_TO_CHECK}

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| STATIC CODE ANALYSIS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| TESTS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

run_tests:
  stage: tests
  extends: .configuration
  needs: [ ]  # do not wait for previous stage to finish before starting this one
  variables:
    PATH_TO_REPORT: "$CI_PROJECT_DIR/report.xml"
  script:
    - echo -e "${TXT_BLUE}Launching tests...${TXT_CLEAR}"
    - python3 -m pytest --durations 0 --junitxml=report.xml tests/
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: $PATH_TO_REPORT

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| TESTS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
